#include "stdafx.h"
#include "AtgConsole.h"
#include "AtgInput.h"
#include "AtgUtil.h"

#include <stdint.h>
#include <cstdint>

#include "SMC.h"

//Each fuse is grouped into a nibble, with the MSB being the left most bit
//i.e. 0xC for fuse line 0 would be 1100, so fuses 0 and 1

typedef unsigned __int64 QWORD;

#define HVXCALL QWORD _declspec(naked)

#define FUSE_BLOW_FAILED	0
#define FUSE_BLOW_SUCCESSFUL	1
#define QUIESCE_FUSE_BLOW_REASON	1

#define HVX_EXPANSION_SIGNATURE	'HVPP'
#define HVX_OUTPUT_POST_ADDRESS	0x2543;

const BYTE HvPeekPokeExp[] = {
0x48, 0x58, 0x50, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x34, 0x1F, 0xD6, 0xDA,
0x2F, 0xCA, 0xA8, 0x17, 0xF0, 0x30, 0xCC, 0x44, 0x0A, 0x41, 0xFA, 0x7C, 0xA0, 0xC1, 0xFD, 0x33,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x7A, 0x02, 0x59, 0x43, 0x9E, 0xE6, 0x93, 0xD5, 0x01, 0xC9, 0x48, 0x4D, 0xB2, 0xBF, 0x9D, 0x18,
0xA9, 0x16, 0x5E, 0xFF, 0x1E, 0xD5, 0xB6, 0xA8, 0x79, 0x60, 0xA8, 0x2F, 0xC1, 0x8D, 0x20, 0x8A,
0xEB, 0x46, 0xC3, 0x01, 0xEC, 0xC4, 0xDB, 0xDF, 0xA1, 0x04, 0xD1, 0xDF, 0x23, 0x69, 0x5E, 0xCC,
0x50, 0xC3, 0xF4, 0xDD, 0xA4, 0x80, 0x7D, 0x05, 0x2D, 0x57, 0xFF, 0x60, 0xA5, 0x58, 0x69, 0x27,
0x9A, 0x33, 0x70, 0xE8, 0xC2, 0x82, 0xDC, 0xDA, 0xE2, 0x4D, 0xE1, 0xF8, 0xA1, 0xD2, 0xCC, 0x8D,
0x98, 0x05, 0xD1, 0xA3, 0x2E, 0x37, 0x06, 0x0F, 0xF7, 0xEF, 0x70, 0xEF, 0x28, 0xD7, 0xAE, 0xD5,
0x5B, 0x19, 0x1B, 0x13, 0x50, 0x0D, 0x15, 0x00, 0x92, 0x01, 0xEE, 0x38, 0xA7, 0x61, 0xB1, 0xA1,
0x27, 0xBF, 0xB0, 0x42, 0x0F, 0x07, 0xC3, 0x8F, 0x78, 0xAD, 0xAF, 0x87, 0x8F, 0x34, 0x8A, 0xA6,
0x69, 0x7D, 0x40, 0xB6, 0x5C, 0x9E, 0x01, 0xEC, 0x9F, 0x5E, 0x78, 0x30, 0x09, 0x5A, 0x21, 0xFF,
0x35, 0x8C, 0x13, 0xBE, 0xBC, 0x92, 0x67, 0xE3, 0x17, 0x0B, 0x09, 0x1C, 0xE2, 0x9D, 0xEC, 0xFD,
0xFB, 0x6C, 0x49, 0x3A, 0xCC, 0xE7, 0x99, 0xB6, 0xB3, 0x8A, 0x8F, 0xEF, 0xF7, 0xA0, 0x28, 0x4F,
0x72, 0xC7, 0x3D, 0xD7, 0xCC, 0xEB, 0xB2, 0x1B, 0x74, 0x93, 0xD7, 0x02, 0x05, 0xD5, 0xE1, 0x25,
0x35, 0xD7, 0xE0, 0x50, 0xEA, 0xCF, 0x82, 0x69, 0xE3, 0x3B, 0x6F, 0xFA, 0x13, 0xF0, 0x5B, 0xD9,
0x1A, 0xB0, 0xD3, 0x0B, 0x85, 0x4D, 0x6A, 0xFC, 0x31, 0x45, 0xC3, 0xA3, 0xFA, 0x7E, 0xDA, 0x93,
0x84, 0xD4, 0xE7, 0xFA, 0xAB, 0x7C, 0x22, 0x96, 0x54, 0x69, 0x7F, 0xC9, 0xF8, 0xC4, 0x5A, 0xC2,
0x82, 0x99, 0x34, 0x46, 0x81, 0x6F, 0x06, 0x33, 0x19, 0x94, 0x74, 0xA4, 0x76, 0x02, 0x4F, 0xB9,
0x48, 0x56, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x00, 0x00, 0x01, 0x90,
0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00,
0x7D, 0x88, 0x02, 0xA6, 0xFB, 0xE1, 0xFF, 0xF0, 0xF9, 0x81, 0xFF, 0xF8, 0x94, 0x21, 0xFF, 0x00,
0x7C, 0x9F, 0x23, 0x78, 0x2C, 0x1F, 0x00, 0x00, 0x41, 0x82, 0x00, 0xC0, 0x2C, 0x1F, 0x00, 0x01,
0x41, 0x82, 0x00, 0xC0, 0x2C, 0x1F, 0x00, 0x02, 0x41, 0x82, 0x00, 0xC0, 0x2C, 0x1F, 0x00, 0x03,
0x41, 0x82, 0x00, 0xC0, 0x2C, 0x1F, 0x00, 0x0A, 0x41, 0x82, 0x00, 0x64, 0x2C, 0x1F, 0x00, 0x05,
0x41, 0x82, 0x00, 0xD4, 0x2C, 0x1F, 0x00, 0x06, 0x41, 0x82, 0x00, 0xD4, 0x2C, 0x1F, 0x00, 0x07,
0x41, 0x82, 0x00, 0xD4, 0x2C, 0x1F, 0x00, 0x08, 0x41, 0x82, 0x00, 0xD4, 0x2C, 0x1F, 0x00, 0x0B,
0x40, 0x80, 0x00, 0x00, 0x80, 0x60, 0x00, 0x4C, 0x7C, 0x62, 0x1A, 0x14, 0x80, 0x63, 0x00, 0x08,
0x7C, 0x69, 0x03, 0xA6, 0x7C, 0xC3, 0x33, 0x78, 0x38, 0x80, 0x00, 0x01, 0x4E, 0x80, 0x04, 0x21,
0x7C, 0x66, 0x1B, 0x78, 0x7C, 0xE9, 0x03, 0xA6, 0x2C, 0x1F, 0x00, 0x04, 0x41, 0x82, 0x00, 0x6C,
0x2C, 0x1F, 0x00, 0x09, 0x41, 0x82, 0x00, 0xA0, 0x48, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x05,
0x7C, 0xA6, 0x2B, 0x78, 0x3C, 0x80, 0x7C, 0x60, 0x50, 0xA6, 0x54, 0x6A, 0x60, 0x84, 0x02, 0xA6,
0x50, 0xC4, 0x32, 0xE8, 0x7C, 0x68, 0x02, 0xA6, 0x38, 0x63, 0x00, 0x30, 0x90, 0x83, 0x00, 0x00,
0x7C, 0x00, 0x18, 0x6C, 0x7C, 0x00, 0x1F, 0xAC, 0x7C, 0x00, 0x04, 0xAC, 0x4C, 0x00, 0x01, 0x2C,
0x7C, 0x79, 0x4A, 0xA6, 0x48, 0x00, 0x00, 0x98, 0x88, 0x65, 0x00, 0x00, 0x48, 0x00, 0x00, 0x90,
0xA0, 0x65, 0x00, 0x00, 0x48, 0x00, 0x00, 0x88, 0x80, 0x65, 0x00, 0x00, 0x48, 0x00, 0x00, 0x80,
0xE8, 0x65, 0x00, 0x00, 0x48, 0x00, 0x00, 0x78, 0x8B, 0xE5, 0x00, 0x00, 0x9B, 0xE6, 0x00, 0x00,
0x38, 0xA5, 0x00, 0x01, 0x38, 0xC6, 0x00, 0x01, 0x42, 0x00, 0xFF, 0xF0, 0x38, 0x60, 0x00, 0x00,
0x48, 0x00, 0x00, 0x5C, 0x98, 0xC5, 0x00, 0x00, 0x48, 0x00, 0x00, 0x40, 0xB0, 0xC5, 0x00, 0x00,
0x48, 0x00, 0x00, 0x38, 0x90, 0xC5, 0x00, 0x00, 0x48, 0x00, 0x00, 0x30, 0xF8, 0xC5, 0x00, 0x00,
0x48, 0x00, 0x00, 0x28, 0x8B, 0xE6, 0x00, 0x00, 0x9B, 0xE5, 0x00, 0x00, 0x7C, 0x00, 0x28, 0x6C,
0x7C, 0x00, 0x2F, 0xAC, 0x7C, 0x00, 0x04, 0xAC, 0x4C, 0x00, 0x01, 0x2C, 0x38, 0xA5, 0x00, 0x01,
0x38, 0xC6, 0x00, 0x01, 0x42, 0x00, 0xFF, 0xE0, 0x38, 0x60, 0x00, 0x00, 0x7C, 0x00, 0x28, 0x6C,
0x7C, 0x00, 0x2F, 0xAC, 0x7C, 0x00, 0x04, 0xAC, 0x4C, 0x00, 0x01, 0x2C, 0x38, 0x21, 0x01, 0x00,
0xEB, 0xE1, 0xFF, 0xF0, 0xE9, 0x81, 0xFF, 0xF8, 0x7D, 0x88, 0x03, 0xA6, 0x4E, 0x80, 0x00, 0x20

};

enum HVPeekTypes
{
	PeekBYTE = 0x0,
	PeekWORD = 0x1,
	PeekDWORD = 0x2,
	PeekQWORD = 0x3,
	PeekBytes = 0x4,
	PeekSPR = 0xA,
	HvExecute = 0xC
};

enum HvPokeTypes
{
	PokeBYTE = 0x5,
	PokeWORD = 0x6,
	PokeDWORD = 0x7,
	PokeQWORD = 0x8,
	PokeBytes = 0x9,
	PokeSPR = 0xB
};

ATG::Console OutputConsole;

static HVXCALL HvxQuiesceProcessor(BYTE Reason)
{
	__asm
	{
		li    r0, 0x2
		sc
		blr
	}
}

static HVXCALL HvxBlowFuses(QWORD inp1)
{
	__asm
	{
		li    r0, 0x24
		sc
		blr
	}
}

static HVXCALL HvxPOSTOutput(BYTE Code)
{
	__asm
	{
		li    r0, 0xD
		sc
		blr
	}
}

static HVXCALL HvxExpansionInstall(DWORD PhysicalAddress, DWORD CodeSize)
{
	__asm
	{
		li   r0, 0x72
		sc
		blr
	}
}

static HVXCALL HvxExpansionCall(DWORD ExpansionId, QWORD Param1 = 0, QWORD Param2 = 0, QWORD Param3 = 0, QWORD Param4 = 0)
{
	__asm
	{
		li   r0, 0x73
		sc
		blr
	}
}

void QuiesceProcessor()
{
	HvxQuiesceProcessor(QUIESCE_FUSE_BLOW_REASON);
}

QWORD HvPeekQWORD(QWORD address)
{
	return HvxExpansionCall(HVX_EXPANSION_SIGNATURE, PeekQWORD, address);
}

void AddPOSTPatch(QWORD address, short code, QWORD origInstruction)
{
	QWORD codeInstruction = 0x38600000 + code;
	QWORD branchInstruction = 0x48000000 + HVX_OUTPUT_POST_ADDRESS;

	HvxExpansionCall(HVX_EXPANSION_SIGNATURE, PokeDWORD, address, codeInstruction);
	HvxExpansionCall(HVX_EXPANSION_SIGNATURE, PokeDWORD, address + 0x4, branchInstruction);
	HvxExpansionCall(HVX_EXPANSION_SIGNATURE, PokeDWORD, address + 0x8, origInstruction);
}

QWORD GetFuseLine(int fuseline)
{
	if (fuseline >= 0 && fuseline < 12)
	{
		return HvPeekQWORD(0x8000020000020000 + (fuseline * 0x200));
	}

	return -1;
}

void PrintFuses()
{
	OutputConsole.Format("Your current fuses are: \n");
	for (int i = 0; i < 12; i++)
	{
		QWORD currentFuseLine = GetFuseLine(i);
		unsigned int high, low;
		high = currentFuseLine >> 32;
		low = currentFuseLine & 0xFFFFFFFF;

		OutputConsole.Format("Fuse Line %02d: %08X%08X\n", i, high, low);
	}
}

void BlowFuses()
{
	HANDLE threadOneHandle, threadTwoHandle, threadThreeHandle, threadFourHandle, threadFiveHandle;
	DWORD threadOneID, threadTwoID, threadThreeID, threadFourID, threadFiveID;

	#pragma region Thread Creation
	ExCreateThread(&threadFiveHandle, 0, &threadFiveID, (VOID*)XapiThreadStartup, (LPTHREAD_START_ROUTINE)QuiesceProcessor, NULL, 0x427);
	ExCreateThread(&threadFourHandle, 0, &threadFourID, (VOID*)XapiThreadStartup, (LPTHREAD_START_ROUTINE)QuiesceProcessor, NULL, 0x427);
	ExCreateThread(&threadThreeHandle, 0, &threadThreeID, (VOID*)XapiThreadStartup, (LPTHREAD_START_ROUTINE)QuiesceProcessor, NULL, 0x427);
	ExCreateThread(&threadTwoHandle, 0, &threadTwoID, (VOID*)XapiThreadStartup, (LPTHREAD_START_ROUTINE)QuiesceProcessor, NULL, 0x427);
	ExCreateThread(&threadOneHandle, 0, &threadOneID, (VOID*)XapiThreadStartup, (LPTHREAD_START_ROUTINE)QuiesceProcessor, NULL, 0x427);
	#pragma endregion

	#pragma region Thread Processors
	XSetThreadProcessor(threadFiveHandle, 5);
	XSetThreadProcessor(threadFourHandle, 4);
	XSetThreadProcessor(threadThreeHandle, 3);
	XSetThreadProcessor(threadTwoHandle, 2);
	XSetThreadProcessor(threadOneHandle, 1);
	#pragma endregion

	#pragma region Thread Priorities
	SetThreadPriority(threadFiveHandle, THREAD_PRIORITY_TIME_CRITICAL);
	SetThreadPriority(threadFourHandle, THREAD_PRIORITY_TIME_CRITICAL);
	SetThreadPriority(threadThreeHandle, THREAD_PRIORITY_TIME_CRITICAL);
	SetThreadPriority(threadTwoHandle, THREAD_PRIORITY_TIME_CRITICAL);
	SetThreadPriority(threadOneHandle, THREAD_PRIORITY_TIME_CRITICAL);
	#pragma endregion

	#pragma region Resume Threads
	ResumeThread(threadFiveHandle);
	ResumeThread(threadFourHandle);
	ResumeThread(threadThreeHandle);
	ResumeThread(threadTwoHandle);
	ResumeThread(threadOneHandle);
	#pragma endregion

	HvxBlowFuses(0x0);
	HvxPOSTOutput(0xFF);

	//TODO: Deal with restoring properly and returning a value from HvxBlowFuses
}

void TryBlowFuses()
{
	HANDLE threadHandle;
	DWORD threadID;
	OutputConsole.Format("Creating thread...\n");
	ExCreateThread(&threadHandle, 0, &threadID, (VOID*)XapiThreadStartup, (LPTHREAD_START_ROUTINE)BlowFuses, NULL, 0x427);
	OutputConsole.Format("Setting thread processor...\n");
	XSetThreadProcessor(threadHandle, 0);
	OutputConsole.Format("Setting thread priority...\n");
	SetThreadPriority(threadHandle, THREAD_PRIORITY_TIME_CRITICAL);
	OutputConsole.Format("Resuming thread...\n");
	ResumeThread(threadHandle);

	//TODO: Fix this
	/*DWORD exitCode;
	if (GetExitCodeThread(threadHandle, &exitCode))
	{
		if (exitCode == FUSE_BLOW_SUCCESSFUL)
		{
			HvxPOSTOutput(0x80);
		}

		else if (exitCode == FUSE_BLOW_FAILED)
		{
			HvxPOSTOutput(0x40);
		}

		else
		{
			HvxPOSTOutput(0x20);
		}
	}

	else
	{
		HvxPOSTOutput(0x10);
	}*/

	return;
}

void Exit()
{
	OutputConsole.Format("Returning to dashboard...");
	XLaunchNewImage(XLAUNCH_KEYWORD_DASH, 0);
}

HRESULT InitializePeekPoke()
{
	VOID* pPhysExp = XPhysicalAlloc(0x1000, MAXULONG_PTR, 0, PAGE_READWRITE);
	DWORD physExpAdd = (DWORD)MmGetPhysicalAddress(pPhysExp);

	// Copy over our expansion data
	ZeroMemory(pPhysExp, 0x1000);
	memcpy(pPhysExp, HvPeekPokeExp, sizeof(HvPeekPokeExp));

	// Now we can install our expansion
	HRESULT result = (HRESULT)HvxExpansionInstall(physExpAdd, 0x1000);

	// Free our allocated data
	XPhysicalFree(pPhysExp);

	// Return our install result
	return result;
}

VOID __cdecl main()
{
	ATG::GAMEPAD* gamepad;
	bool wasAPressed = false;

	OutputConsole.Create("game:\\Media\\Fonts\\Arial_12.xpr", 0xFF0000FF, 0xFFFFFFFF);

	OutputConsole.Format("KeBlowFuses v.1.0.0.0\n");
	OutputConsole.Format("A utility to call KeBlowFuses on a XeFuseBlowPatcher patched kernel.\n\n");

	if (NT_SUCCESS(InitializePeekPoke()))
	{
		OutputConsole.Format("Initialized HV PeekPoke Expansion successfully!\n\n");
		PrintFuses();
	}

	else
	{
		OutputConsole.Format("Failed to initialize HV PeekPoke Expansion!\n");
	}

	OutputConsole.Format("\nWARNING: Are you sure the included kernel patches are correct? (Press A to continue or B to cancel)\n");

	while (true)
	{
		gamepad = ATG::Input::GetMergedInput();

		if (gamepad->wPressedButtons & XINPUT_GAMEPAD_A)
		{
			wasAPressed = true;
			break;
		}

		else if (gamepad->wPressedButtons & XINPUT_GAMEPAD_B)
		{
			wasAPressed = false;
			Exit();
			break;
		}
	}

	if (wasAPressed)
	{
		wasAPressed = false;
		OutputConsole.Format("WARNING: Are you ABSOLUTELY SURE you want to burn fuses? THERE IS NO TURNING BACK. (Press A to continue or B to cancel)\n\n");

		while (true)
		{
			gamepad = ATG::Input::GetMergedInput();

			if (gamepad->wPressedButtons & XINPUT_GAMEPAD_A)
			{
				wasAPressed = true;
				break;
			}

			else if (gamepad->wPressedButtons & XINPUT_GAMEPAD_B)
			{
				wasAPressed = false;
				Exit();
				break;
			}
		}

		if (wasAPressed)
		{
			OutputConsole.Format("Trying to blow fuses, please wait...likely it will just freeze. Restart Console\n");

			TryBlowFuses();

			OutputConsole.Format("Function returned successfully.\n");

			PrintFuses();
			OutputConsole.Format("Press A to exit to the dashboard.\n");

			while (true)
			{
				gamepad = ATG::Input::GetMergedInput();

				if (gamepad->wPressedButtons & XINPUT_GAMEPAD_A)
				{
					break;
				}
			}
		}
	}

	Exit();
}